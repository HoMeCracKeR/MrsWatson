cmake_minimum_required(VERSION 2.6)
project(mrswatsontest)

file(GLOB mrswatsontest_SOURCES *.c */*.c)

# On unix, we can build both the 32/64 bit versions at once. However with
# Visual Studio we need to generate two separate out-of-source build dirs,
# one for each architecture.

if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
  add_executable(mrswatsontest ${mrswatsontest_SOURCES})
  set_target_properties(mrswatsontest PROPERTIES COMPILE_FLAGS "-m32")
  set_target_properties(mrswatsontest PROPERTIES LINK_FLAGS "-m32")
  target_link_libraries(mrswatsontest mrswatsoncore dl)
elseif(APPLE)
  add_executable(mrswatsontest ${mrswatsontest_SOURCES})
  set_target_properties(mrswatsontest PROPERTIES COMPILE_FLAGS "-arch i386")
  set_target_properties(mrswatsontest PROPERTIES LINK_FLAGS "-arch i386")
  target_link_libraries(mrswatsontest mrswatsoncore)
elseif(MSVC)
  if(${platform_bits} EQUAL 32)
    add_executable(mrswatsontest ${mrswatsontest_SOURCES})
    set_target_properties(mrswatsontest PROPERTIES COMPILE_FLAGS "/D WIN32=1")
    target_link_libraries(mrswatsontest mrswatsoncore)
  endif()
endif()

if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
  add_executable(mrswatsontest64 ${mrswatsontest_SOURCES})
  set_target_properties(mrswatsontest64 PROPERTIES COMPILE_FLAGS "-m64")
  set_target_properties(mrswatsontest64 PROPERTIES LINK_FLAGS "-m64")
  target_link_libraries(mrswatsontest64 mrswatsoncore64 dl)
elseif(APPLE)
  add_executable(mrswatsontest64 ${mrswatsontest_SOURCES})
  set_target_properties(mrswatsontest64 PROPERTIES COMPILE_FLAGS "-arch x86_64")
  set_target_properties(mrswatsontest64 PROPERTIES LINK_FLAGS "-arch x86_64")
  target_link_libraries(mrswatsontest64 mrswatsoncore64)
elseif(MSVC)
  if(${platform_bits} EQUAL 64)
  add_executable(mrswatsontest64 ${mrswatsontest_SOURCES})
    set_target_properties(mrswatsontest64 PROPERTIES COMPILE_FLAGS "/MACHINE:X64 /D WIN64=1")
    target_link_libraries(mrswatsontest64 mrswatsoncore64)
  endif()
endif()

